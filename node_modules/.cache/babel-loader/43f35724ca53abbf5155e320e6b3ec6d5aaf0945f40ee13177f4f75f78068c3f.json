{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isRequiredIf from 'react-proptype-conditional-require';\nimport ExecutionEnvironment from 'exenv';\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\nvar TwitterTimelineEmbed = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTimelineEmbed, _Component);\n  function TwitterTimelineEmbed(props) {\n    var _this;\n    _classCallCheck(this, TwitterTimelineEmbed);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTimelineEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterTimelineEmbed, [{\n    key: \"buildChromeOptions\",\n    value: function buildChromeOptions(options) {\n      options.chrome = '';\n      if (this.props.noHeader) {\n        options.chrome = options.chrome + ' noheader';\n      }\n      if (this.props.noFooter) {\n        options.chrome = options.chrome + ' nofooter';\n      }\n      if (this.props.noBorders) {\n        options.chrome = options.chrome + ' noborders';\n      }\n      if (this.props.noScrollbar) {\n        options.chrome = options.chrome + ' noscrollbar';\n      }\n      if (this.props.transparent) {\n        options.chrome = options.chrome + ' transparent';\n      }\n      return options;\n    }\n  }, {\n    key: \"buildOptions\",\n    value: function buildOptions() {\n      var options = Object.assign({}, this.props.options);\n      if (this.props.autoHeight) {\n        options.height = this.refs.embedContainer.parentNode.offsetHeight;\n      }\n      options = Object.assign({}, options, {\n        theme: this.props.theme,\n        linkColor: this.props.linkColor,\n        borderColor: this.props.borderColor,\n        lang: this.props.lang\n      });\n      return options;\n    }\n  }, {\n    key: \"renderWidget\",\n    value: function renderWidget(options) {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTimeline({\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        }, this.refs.embedContainer, options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.');\n            return;\n          }\n          var options = _this3.buildOptions();\n          /** Append chrome options */\n\n          options = _this3.buildChromeOptions(options);\n          _this3.renderWidget(options);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterTimelineEmbed;\n}(Component);\n_defineProperty(TwitterTimelineEmbed, \"propTypes\", {\n  /**\n       * This can be either of profile, likes, list, collection, URL, widget\n       */\n  sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n  /**\n       * username of twitter handle as String\n       */\n  screenName: isRequiredIf(PropTypes.string, function (props) {\n    return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n  /**\n       * UserId of twitter handle as number\n       */\n  userId: isRequiredIf(PropTypes.number, function (props) {\n    return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n  /**\n       * To show list, used along with slug\n       */\n  ownerScreenName: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n  /**\n       * To show list, used along with ownerScreenName\n       */\n  slug: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n  /**\n       * To show list, unique list id\n       * Also used with collections, in that case its valid collection id\n       */\n  id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';\n  }),\n  /**\n       * To show twitter content with url.\n       * Supported content includes profiles, likes, lists, and collections.\n       */\n  url: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'url';\n  }),\n  /**\n       * To show custom widget\n       */\n  widgetId: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'widget';\n  }),\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n  /**\n       * Automatically fit into parent container height\n       */\n  autoHeight: PropTypes.bool,\n  /**\n       * With dark or light theme\n       */\n  theme: PropTypes.oneOf(['dark', 'light']),\n  /**\n       * With custom link colors. Note: Only Hex colors are supported.\n       */\n  linkColor: PropTypes.string,\n  /**\n       * With custom border colors. Note: Only Hex colors are supported.\n       */\n  borderColor: PropTypes.string,\n  /**\n       * Hide the header from timeline\n       */\n  noHeader: PropTypes.bool,\n  /**\n       * Hide the footer from timeline\n       */\n  noFooter: PropTypes.bool,\n  /**\n       * Hide the border from timeline\n       */\n  noBorders: PropTypes.bool,\n  /**\n       * Hide the scrollbars\n       */\n  noScrollbar: PropTypes.bool,\n  /**\n       * Enable Transparancy\n       */\n  transparent: PropTypes.bool,\n  /**\n       * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n       */\n  lang: PropTypes.string,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterShareButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterShareButton, _Component);\n  function TwitterShareButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterShareButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterShareButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterShareButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterShareButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createShareButton(_this2.props.url, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterShareButton;\n}(Component);\n_defineProperty(TwitterShareButton, \"propTypes\", {\n  /**\n  * Url for sharing\n  */\n  url: PropTypes.string.isRequired,\n  /**\n  * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n  */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterFollowButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterFollowButton, _Component);\n  function TwitterFollowButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterFollowButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterFollowButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterFollowButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createFollowButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterFollowButton;\n}(Component);\n_defineProperty(TwitterFollowButton, \"propTypes\", {\n  /**\n       * Username of twitter user which will be followed on click\n       */\n  screenName: PropTypes.string.isRequired,\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterHashtagButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterHashtagButton, _Component);\n  function TwitterHashtagButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterHashtagButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterHashtagButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterHashtagButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createHashtagButton(_this2.props.tag, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterHashtagButton;\n}(Component);\n_defineProperty(TwitterHashtagButton, \"propTypes\", {\n  /**\n       * Tag name for hashtag button\n       */\n  tag: PropTypes.string.isRequired,\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterMentionButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterMentionButton, _Component);\n  function TwitterMentionButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterMentionButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMentionButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterMentionButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMentionButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterMentionButton;\n}(Component);\n_defineProperty(TwitterMentionButton, \"propTypes\", {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: PropTypes.string.isRequired,\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterTweetEmbed = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTweetEmbed, _Component);\n  function TwitterTweetEmbed(props) {\n    var _this;\n    _classCallCheck(this, TwitterTweetEmbed);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTweetEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterTweetEmbed, [{\n    key: \"renderWidget\",\n    value: function renderWidget() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.');\n        return;\n      }\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTweet(this.props.tweetId, this.refs.embedContainer, this.props.options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          _this3.renderWidget();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterTweetEmbed;\n}(Component);\n_defineProperty(TwitterTweetEmbed, \"propTypes\", {\n  /**\n       * Tweet id that needs to be shown\n       */\n  tweetId: PropTypes.string.isRequired,\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterMomentShare = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterMomentShare, _Component);\n  function TwitterMomentShare(props) {\n    var _this;\n    _classCallCheck(this, TwitterMomentShare);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMomentShare).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterMomentShare, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMoment(_this2.props.momentId, _this2.refs.shareMoment, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"shareMoment\"\n      }));\n    }\n  }]);\n  return TwitterMomentShare;\n}(Component);\n_defineProperty(TwitterMomentShare, \"propTypes\", {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: PropTypes.string.isRequired,\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterDMButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterDMButton, _Component);\n  function TwitterDMButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterDMButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterDMButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterDMButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterDMButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createDMButton(_this2.props.id, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterDMButton;\n}(Component);\n_defineProperty(TwitterDMButton, \"propTypes\", {\n  /**\n  * Twitter user id for DM button\n  */\n  id: PropTypes.number.isRequired,\n  /**\n  * Additional options to be added to the button\n  */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterVideoEmbed = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterVideoEmbed, _Component);\n  function TwitterVideoEmbed(props) {\n    var _this;\n    _classCallCheck(this, TwitterVideoEmbed);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterVideoEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterVideoEmbed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createVideo(_this2.props.id, _this2.refs.embedContainer).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterVideoEmbed;\n}(Component);\n_defineProperty(TwitterVideoEmbed, \"propTypes\", {\n  /**\n       * Id of video tweet.\n       */\n  id: PropTypes.string.isRequired,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nvar TwitterOnAirButton = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterOnAirButton, _Component);\n  function TwitterOnAirButton(props) {\n    var _this;\n    _classCallCheck(this, TwitterOnAirButton);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterOnAirButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n  _createClass(TwitterOnAirButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var onLoad = this.props.onLoad;\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.');\n            return;\n          }\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createPeriscopeOnAirButton(_this2.props.username, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n  return TwitterOnAirButton;\n}(Component);\n_defineProperty(TwitterOnAirButton, \"propTypes\", {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: PropTypes.string.isRequired,\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\nexport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton };","map":{"version":3,"sources":["/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/twitter-widget-url.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterTimelineEmbed.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterShareButton.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterFollowButton.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterHashtagButton.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterMentionButton.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterTweetEmbed.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterMomentShare.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterDMButton.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterVideoEmbed.js","/Users/vijaydevkate/Documents/GitHub/Blog_React/Reactjs.Blog/React_Blog/node_modules/react-twitter-embed/src/components/TwitterOnAirButton.js"],"names":["twitterWidgetJs","TwitterTimelineEmbed","Component","sourceType","PropTypes","oneOf","isRequired","screenName","isRequiredIf","string","props","hasOwnProperty","userId","number","ownerScreenName","slug","id","oneOfType","url","widgetId","options","object","autoHeight","bool","theme","linkColor","borderColor","noHeader","noFooter","noBorders","noScrollbar","transparent","lang","placeholder","element","onLoad","func","state","isLoading","chrome","Object","assign","height","refs","embedContainer","parentNode","offsetHeight","isMountCanceled","window","twttr","widgets","createTimeline","then","setState","ExecutionEnvironment","canUseDOM","script","require","console","error","buildOptions","buildChromeOptions","renderWidget","TwitterShareButton","createShareButton","TwitterFollowButton","createFollowButton","TwitterHashtagButton","tag","createHashtagButton","TwitterMentionButton","createMentionButton","TwitterTweetEmbed","tweetId","createTweet","TwitterMomentShare","momentId","createMoment","shareMoment","TwitterDMButton","createDMButton","TwitterVideoEmbed","createVideo","TwitterOnAirButton","username","createPeriscopeOnAirButton"],"mappings":";;;;;;;;;;AAAA,IAAMA,eAAe,GAAG,yCAAxB;ICMqBC,oBAAAA,G;;;gCA2FPS,KAAZ,EAAmB;;;8FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;uCAKiBlB,OAAAA,EAAS;MAC1BA,OAAO,CAACmB,MAARnB,GAAiB,EAAjBA;UACI,IAAA,CAAKV,KAAL,CAAWiB,QAAf,EAAyB;QAAEP,OAAO,CAACmB,MAARnB,GAAiBA,OAAO,CAACmB,MAARnB,GAAiB,WAAlCA;;UAEvB,IAAA,CAAKV,KAAL,CAAWkB,QAAf,EAAyB;QAAER,OAAO,CAACmB,MAARnB,GAAiBA,OAAO,CAACmB,MAARnB,GAAiB,WAAlCA;;UAEvB,IAAA,CAAKV,KAAL,CAAWmB,SAAf,EAA0B;QAAET,OAAO,CAACmB,MAARnB,GAAiBA,OAAO,CAACmB,MAARnB,GAAiB,YAAlCA;;UAExB,IAAA,CAAKV,KAAL,CAAWoB,WAAf,EAA4B;QAAEV,OAAO,CAACmB,MAARnB,GAAiBA,OAAO,CAACmB,MAARnB,GAAiB,cAAlCA;;UAE1B,IAAA,CAAKV,KAAL,CAAWqB,WAAf,EAA4B;QAAEX,OAAO,CAACmB,MAARnB,GAAiBA,OAAO,CAACmB,MAARnB,GAAiB,cAAlCA;;aAEvBA,OAAP;;;;mCAGa;UACTA,OAAO,GAAGoB,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB,IAAA,CAAK9B,KAAL,CAAWU,OAA7BoB,CAAd;UACI,IAAA,CAAK9B,KAAL,CAAWY,UAAf,EAA2B;QAAEF,OAAO,CAACsB,MAARtB,GAAiB,IAAA,CAAKuB,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCC,YAArD1B;;MAE7BA,OAAO,GAAG,MAAM,CAACqB,MAAP,CAAc,CAAA,CAAd,EAAkBrB,OAAlB,EAA2B;QACnCI,KAAK,EAAE,IAAA,CAAKd,KAAL,CAAWc,KADiB;QAEnCC,SAAS,EAAE,IAAA,CAAKf,KAAL,CAAWe,SAFa;QAGnCC,WAAW,EAAE,IAAA,CAAKhB,KAAL,CAAWgB,WAHW;QAInCM,IAAI,EAAE,IAAA,CAAKtB,KAAL,CAAWsB;OAJT,CAAVZ;aAOOA,OAAP;;;;iCAGWA,OAAAA,EAAS;;UACZe,MADY,GACD,IAAA,CAAKzB,KADJ,CACZyB,MADY;UAEhB,CAAC,IAAA,CAAKY,eAAV,EAA2B;QACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBG,cAArBH,CACE;UACE7C,UAAU,EAAE,IAAA,CAAKO,KAAL,CAAWP,UADzB;UAEEI,UAAU,EAAE,IAAA,CAAKG,KAAL,CAAWH,UAFzB;UAGEK,MAAM,EAAE,IAAA,CAAKF,KAAL,CAAWE,MAHrB;UAIEE,eAAe,EAAE,IAAA,CAAKJ,KAAL,CAAWI,eAJ9B;UAKEC,IAAI,EAAE,IAAA,CAAKL,KAAL,CAAWK,IALnB;UAMEC,EAAE,EAAE,IAAA,CAAKN,KAAL,CAAWM,EAAX,IAAiB,IAAA,CAAKN,KAAL,CAAWS,QANlC;UAOED,GAAG,EAAE,IAAA,CAAKR,KAAL,CAAWQ;SARpB8B,EAUE,IAAA,CAAKL,IAAL,CAAUC,cAVZI,EAWE5B,OAXF4B,CAAAA,CAYEI,IAZFJ,CAYO,UAACd,OAAD,EAAa;UAClB,MAAI,CAACmB,QAAL,CAAc;YACZf,SAAS,EAAE;WADb,CAAA;cAGIH,MAAJ,EAAY;YACVA,MAAM,CAACD,OAAD,CAANC;;SAjBJa,CAAAA;;;;;wCAuBgB;;UACdM,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,sEAAdA,CAAAA;;;cAIEtC,OAAO,GAAG,MAAI,CAACwC,YAAL,EAAd;;;UAEAxC,OAAO,GAAG,MAAI,CAACyC,kBAAL,CAAwBzC,OAAxB,CAAVA;UACA,MAAI,CAAC0C,YAAL,CAAkB1C,OAAlB,CAAA;SATI,CAANoC;;;;;2CAcmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EAjL8C/B,SAAAA,CAAAA;gBAA7BD,oBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBE,UAAU,EAAEC,SAAS,CAACC,KAAVD,CAAgB,CAAC,SAAD,EAAY,OAAZ,EAAqB,MAArB,EAA6B,YAA7B,EAA2C,KAA3C,EAAkD,QAAlD,CAAhBA,CAAAA,CAA6EE,UAJxE;;;;EAQjBC,UAAU,EAAEC,YAAY,CAACJ,SAAS,CAACK,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAI,CAACC,KAAK,CAACC,cAAND,CAAqB,QAArBA,CAAD,KAAoCA,KAAK,CAACP,UAANO,KAAqB,SAArBA,IAAkCA,KAAK,CAACP,UAANO,KAAqB,OAA3F,CAAJ;GAAxB,CARP;;;;EAYjBE,MAAM,EAAEJ,YAAY,CAACJ,SAAS,CAACS,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAI,CAACH,KAAK,CAACC,cAAND,CAAqB,YAArBA,CAAD,KAAwCA,KAAK,CAACP,UAANO,KAAqB,SAArBA,IAAkCA,KAAK,CAACP,UAANO,KAAqB,OAA/F,CAAJ;GAAxB,CAZH;;;;EAgBjBI,eAAe,EAAEN,YAAY,CAACJ,SAAS,CAACK,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAIC,KAAK,CAACP,UAANO,KAAqB,MAArBA,IAA+B,CAACA,KAAK,CAACC,cAAND,CAAqB,IAArBA,CAApC;GAAxB,CAhBZ;;;;EAoBjBK,IAAI,EAAEP,YAAY,CAACJ,SAAS,CAACK,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAIC,KAAK,CAACP,UAANO,KAAqB,MAArBA,IAA+B,CAACA,KAAK,CAACC,cAAND,CAAqB,IAArBA,CAApC;GAAxB,CApBD;;;;;EAyBjBM,EAAE,EAAER,YAAY,CAACJ,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACK,MAA7B,CAApBL,CAAD,EAA4D,UAAA,KAAK,EAAA;WAAKM,KAAK,CAACP,UAANO,KAAqB,MAArBA,IAA+B,CAACA,KAAK,CAACC,cAAND,CAAqB,iBAArBA,CAAhCA,IAA2E,CAACA,KAAK,CAACC,cAAND,CAAqB,MAArBA,CAA7E,IAA8GA,KAAK,CAACP,UAANO,KAAqB,YAAvI;GAAjE,CAzBC;;;;;EA8BjBQ,GAAG,EAAEV,YAAY,CAACJ,SAAS,CAACK,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAIC,KAAK,CAACP,UAANO,KAAqB,KAAzB;GAAxB,CA9BA;;;;EAkCjBS,QAAQ,EAAEX,YAAY,CAACJ,SAAS,CAACK,MAAX,EAAmB,UAAA,KAAK,EAAA;WAAIC,KAAK,CAACP,UAANO,KAAqB,QAAzB;GAAxB,CAlCL;;;;EAsCjBU,OAAO,EAAEhB,SAAS,CAACiB,MAtCF;;;;EA0CjBC,UAAU,EAAElB,SAAS,CAACmB,IA1CL;;;;EA8CjBC,KAAK,EAAEpB,SAAS,CAACC,KAAVD,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhBA,CA9CU;;;;EAkDjBqB,SAAS,EAAErB,SAAS,CAACK,MAlDJ;;;;EAsDjBiB,WAAW,EAAEtB,SAAS,CAACK,MAtDN;;;;EA0DjBkB,QAAQ,EAAEvB,SAAS,CAACmB,IA1DH;;;;EA8DjBK,QAAQ,EAAExB,SAAS,CAACmB,IA9DH;;;;EAkEjBM,SAAS,EAAEzB,SAAS,CAACmB,IAlEJ;;;;EAsEjBO,WAAW,EAAE1B,SAAS,CAACmB,IAtEN;;;;EA0EjBQ,WAAW,EAAE3B,SAAS,CAACmB,IA1EN;;;;EA8EjBS,IAAI,EAAE5B,SAAS,CAACK,MA9EC;;;;EAmFjBwB,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAnFI;;;;EAuFjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICzFD2B,kBAAAA,G;;;8BAqBPrD,KAAZ,EAAmB;;;4FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,oEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBgB,iBAArBhB,CACE,MAAI,CAACtC,KAAL,CAAWQ,GADb8B,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA/D4C/B,SAAAA,CAAAA;gBAA3B6D,kBAAAA,EAAAA,WAAAA,EACA;;;;EAIjB7C,GAAG,EAAEd,SAAS,CAACK,MAAVL,CAAiBE,UAJL;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAajBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAbI;;;;EAiBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;IClBD6B,mBAAAA,G;;;+BAoBPvD,KAAZ,EAAmB;;;6FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,qEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBkB,kBAArBlB,CACE,MAAI,CAACtC,KAAL,CAAWH,UADbyC,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9D6C/B,SAAAA,CAAAA;gBAA5B+D,mBAAAA,EAAAA,WAAAA,EACA;;;;EAIjB1D,UAAU,EAAEH,SAAS,CAACK,MAAVL,CAAiBE,UAJZ;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBD+B,oBAAAA,G;;;gCAoBPzD,KAAZ,EAAmB;;;8FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,sEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBqB,mBAArBrB,CACE,MAAI,CAACtC,KAAL,CAAW0D,GADbpB,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9D8C/B,SAAAA,CAAAA;gBAA7BiE,oBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBC,GAAG,EAAEhE,SAAS,CAACK,MAAVL,CAAiBE,UAJL;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBDkC,oBAAAA,G;;;gCAoBP5D,KAAZ,EAAmB;;;8FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,sEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBuB,mBAArBvB,CACE,MAAI,CAACtC,KAAL,CAAWH,UADbyC,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9D8C/B,SAAAA,CAAAA;gBAA7BoE,oBAAAA,EAAAA,WAAAA,EACA;;;;EAIjB/D,UAAU,EAAEH,SAAS,CAACK,MAAVL,CAAiBE,UAJZ;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBDoC,iBAAAA,G;;;6BAoBP9D,KAAZ,EAAmB;;;2FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;mCAKa;;UACLH,MADK,GACM,IAAA,CAAKzB,KADX,CACLyB,MADK;UAET,CAACa,MAAM,CAACC,KAAZ,EAAmB;QACjBS,OAAO,CAACC,KAARD,CAAc,mEAAdA,CAAAA;;;UAGE,CAAC,IAAA,CAAKX,eAAV,EAA2B;QACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqB0B,WAArB1B,CACE,IAAA,CAAKtC,KAAL,CAAW+D,OADbzB,EAEE,IAAA,CAAKL,IAAL,CAAUC,cAFZI,EAGE,IAAA,CAAKtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;UAClB,MAAI,CAACmB,QAAL,CAAc;YACZf,SAAS,EAAE;WADb,CAAA;cAGIH,MAAJ,EAAY;YACVA,MAAM,CAACD,OAAD,CAANC;;SATJa,CAAAA;;;;;wCAegB;;UACdM,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;UAC7C,MAAI,CAAC8D,YAAL,EAAA;SADI,CAANN;;;;;2CAMmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EAjE2C/B,SAAAA,CAAAA;gBAA1BsE,iBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBC,OAAO,EAAErE,SAAS,CAACK,MAAVL,CAAiBE,UAJT;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBDuC,kBAAAA,G;;;8BAoBPjE,KAAZ,EAAmB;;;4FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,oEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqB6B,YAArB7B,CACE,MAAI,CAACtC,KAAL,CAAWkE,QADb5B,EAEE,MAAI,CAACL,IAAL,CAAUmC,WAFZ9B,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9D4C/B,SAAAA,CAAAA;gBAA3ByE,kBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBC,QAAQ,EAAExE,SAAS,CAACK,MAAVL,CAAiBE,UAJV;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBD2C,eAAAA,G;;;2BAoBPrE,KAAZ,EAAmB;;;yFACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,iEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBgC,cAArBhC,CACE,MAAI,CAACtC,KAAL,CAAWM,EADbgC,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9DyC/B,SAAAA,CAAAA;gBAAxB6E,eAAAA,EAAAA,WAAAA,EACA;;;;EAIjB/D,EAAE,EAAEZ,SAAS,CAACS,MAAVT,CAAiBE,UAJJ;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICjBD6C,iBAAAA,G;;;6BAgBPvE,KAAZ,EAAmB;;;2FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,mEAAdA,CAAAA;;;cAGE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBkC,WAArBlC,CACE,MAAI,CAACtC,KAAL,CAAWM,EADbgC,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,CAAAA,CAGEI,IAHFJ,CAGO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aARJa,CAAAA;;SANE,CAANQ;;;;;2CAsBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EAxD2C/B,SAAAA,CAAAA;gBAA1B+E,iBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBjE,EAAE,EAAEZ,SAAS,CAACK,MAAVL,CAAiBE,UAJJ;;;;EAQjB2B,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CARI;;;;EAYjB+B,MAAM,EAAE/B,SAAS,CAACgC;;ICbD+C,kBAAAA,G;;;8BAoBPzE,KAAZ,EAAmB;;;4FACXA,KAAN,CAAA,CAAA;UACK2B,KAAL,GAAa;MACXC,SAAS,EAAE;KADb;;;;;wCAKkB;;UACVH,MADU,GACC,IAAA,CAAKzB,KADN,CACVyB,MADU;UAEdmB,oBAAoB,CAACC,SAAzB,EAAoC;YAC9BC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;QACAD,MAAM,CAACxD,eAAD,EAAkB,eAAlB,EAAmC,YAAM;cACzC,CAACgD,MAAM,CAACC,KAAZ,EAAmB;YACjBS,OAAO,CAACC,KAARD,CAAc,oEAAdA,CAAAA;;;cAIE,CAAC,MAAI,CAACX,eAAV,EAA2B;YACzBC,MAAM,CAACC,KAAPD,CAAaE,OAAbF,CAAqBqC,0BAArBrC,CACE,MAAI,CAACtC,KAAL,CAAW0E,QADbpC,EAEE,MAAI,CAACL,IAAL,CAAUC,cAFZI,EAGE,MAAI,CAACtC,KAAL,CAAWU,OAHb4B,CAAAA,CAIEI,IAJFJ,CAIO,UAACd,OAAD,EAAa;cAClB,MAAI,CAACmB,QAAL,CAAc;gBACZf,SAAS,EAAE;eADb,CAAA;kBAGIH,MAAJ,EAAY;gBACVA,MAAM,CAACD,OAAD,CAANC;;aATJa,CAAAA;;SAPE,CAANQ;;;;;2CAwBmB;WAChBT,eAAL,GAAuB,IAAvB;;;;6BAGO;UACCT,SADD,GACe,IAAA,CAAKD,KADpB,CACCC,SADD;UAECL,WAFD,GAEiB,IAAA,CAAKvB,KAFtB,CAECuB,WAFD;aAIL,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA,IAAA,EACGK,SAAS,IAAIL,WADhB,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAC;QAFX,CADF;;;;EA9D4C/B,SAAAA,CAAAA;gBAA3BiF,kBAAAA,EAAAA,WAAAA,EACA;;;;EAIjBC,QAAQ,EAAEhF,SAAS,CAACK,MAAVL,CAAiBE,UAJV;;;;EAQjBc,OAAO,EAAEhB,SAAS,CAACiB,MARF;;;;EAYjBY,WAAW,EAAE7B,SAAS,CAACa,SAAVb,CAAoB,CAACA,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAAC8B,OAA7B,CAApB9B,CAZI;;;;EAgBjB+B,MAAM,EAAE/B,SAAS,CAACgC","sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js'\nexport default twitterWidgetJs\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport isRequiredIf from 'react-proptype-conditional-require'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTimelineEmbed extends Component {\n  static propTypes = {\n    /**\n         * This can be either of profile, likes, list, collection, URL, widget\n         */\n    sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n    /**\n         * username of twitter handle as String\n         */\n    screenName: isRequiredIf(PropTypes.string, props => !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * UserId of twitter handle as number\n         */\n    userId: isRequiredIf(PropTypes.number, props => !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * To show list, used along with slug\n         */\n    ownerScreenName: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, used along with ownerScreenName\n         */\n    slug: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, unique list id\n         * Also used with collections, in that case its valid collection id\n         */\n    id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), props => (props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug')) || props.sourceType === 'collection'),\n    /**\n         * To show twitter content with url.\n         * Supported content includes profiles, likes, lists, and collections.\n         */\n    url: isRequiredIf(PropTypes.string, props => props.sourceType === 'url'),\n    /**\n         * To show custom widget\n         */\n    widgetId: isRequiredIf(PropTypes.string, props => props.sourceType === 'widget'),\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n         * Automatically fit into parent container height\n         */\n    autoHeight: PropTypes.bool,\n    /**\n         * With dark or light theme\n         */\n    theme: PropTypes.oneOf(['dark', 'light']),\n    /**\n         * With custom link colors. Note: Only Hex colors are supported.\n         */\n    linkColor: PropTypes.string,\n    /**\n         * With custom border colors. Note: Only Hex colors are supported.\n         */\n    borderColor: PropTypes.string,\n    /**\n         * Hide the header from timeline\n         */\n    noHeader: PropTypes.bool,\n    /**\n         * Hide the footer from timeline\n         */\n    noFooter: PropTypes.bool,\n    /**\n         * Hide the border from timeline\n         */\n    noBorders: PropTypes.bool,\n    /**\n         * Hide the scrollbars\n         */\n    noScrollbar: PropTypes.bool,\n    /**\n         * Enable Transparancy\n         */\n    transparent: PropTypes.bool,\n    /**\n         * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n         */\n    lang: PropTypes.string,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  buildChromeOptions(options) {\n    options.chrome = ''\n    if (this.props.noHeader) { options.chrome = options.chrome + ' noheader' }\n\n    if (this.props.noFooter) { options.chrome = options.chrome + ' nofooter' }\n\n    if (this.props.noBorders) { options.chrome = options.chrome + ' noborders' }\n\n    if (this.props.noScrollbar) { options.chrome = options.chrome + ' noscrollbar' }\n\n    if (this.props.transparent) { options.chrome = options.chrome + ' transparent' }\n\n    return options\n  }\n\n  buildOptions() {\n    let options = Object.assign({}, this.props.options)\n    if (this.props.autoHeight) { options.height = this.refs.embedContainer.parentNode.offsetHeight }\n\n    options = Object.assign({}, options, {\n      theme: this.props.theme,\n      linkColor: this.props.linkColor,\n      borderColor: this.props.borderColor,\n      lang: this.props.lang\n    })\n\n    return options\n  }\n\n  renderWidget(options) {\n    const { onLoad } = this.props\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTimeline(\n        {\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        },\n        this.refs.embedContainer,\n        options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.')\n          return\n        }\n\n        let options = this.buildOptions()\n        /** Append chrome options */\n        options = this.buildChromeOptions(options)\n        this.renderWidget(options)\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterShareButton extends Component {\n  static propTypes = {\n    /**\n    * Url for sharing\n    */\n    url: PropTypes.string.isRequired,\n    /**\n    * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n    */\n    options: PropTypes.object,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterShareButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createShareButton(\n            this.props.url,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterFollowButton extends Component {\n  static propTypes = {\n    /**\n         * Username of twitter user which will be followed on click\n         */\n    screenName: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createFollowButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterHashtagButton extends Component {\n  static propTypes = {\n    /**\n         * Tag name for hashtag button\n         */\n    tag: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createHashtagButton(\n            this.props.tag,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMentionButton extends Component {\n  static propTypes = {\n    /**\n     * Username to which you will need to tweet\n     */\n    screenName: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMentionButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTweetEmbed extends Component {\n  static propTypes = {\n    /**\n         * Tweet id that needs to be shown\n         */\n    tweetId: PropTypes.string.isRequired,\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  renderWidget() {\n    const { onLoad } = this.props\n    if (!window.twttr) {\n      console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.')\n      return\n    }\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTweet(\n        this.props.tweetId,\n        this.refs.embedContainer,\n        this.props.options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        this.renderWidget()\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMomentShare extends Component {\n  static propTypes = {\n    /**\n     * id of Twitter moment to show\n     */\n    momentId: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMoment(\n            this.props.momentId,\n            this.refs.shareMoment,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='shareMoment' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterDMButton extends Component {\n  static propTypes = {\n    /**\n    * Twitter user id for DM button\n    */\n    id: PropTypes.number.isRequired,\n    /**\n    * Additional options to be added to the button\n    */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterDMButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createDMButton(\n            this.props.id,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterVideoEmbed extends Component {\n  static propTypes = {\n    /**\n         * Id of video tweet.\n         */\n    id: PropTypes.string.isRequired,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.')\n          return\n        }\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createVideo(\n            this.props.id,\n            this.refs.embedContainer\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterOnAirButton extends Component {\n  static propTypes = {\n    /**\n     * Username for which you require periscope on air button\n     */\n    username: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createPeriscopeOnAirButton(\n            this.props.username,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}